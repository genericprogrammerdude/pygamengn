<html lang="en-us"><script src="{{cookiecutter.cdn}}pythons.js" type=module id=site data-LINES={{cookiecutter.LINES}} data-CONSOLE={{cookiecutter.CONSOLE}} data-python=python{{cookiecutter.PYBUILD}} data-os=vtx,fs,snd,gui async defer>#<!--

print("""
Loading {{cookiecutter.title}} from {{cookiecutter.archive}}.apk
    Pygbag Version : {{cookiecutter.version}}
    Template Version : 0.9.3
    Python  : {{cookiecutter.PYBUILD}}
    CDN URL : {{cookiecutter.cdn}}
    Screen  : {{cookiecutter.width}}x{{cookiecutter.height}}
    Title   : {{cookiecutter.title}}
    Folder  : {{cookiecutter.directory}}
    Authors : {{cookiecutter.authors}}
    SPDX-License-Identifier: {{cookiecutter.spdx}}

""")


# screen pixels (real, hardware)
WIDTH=1280  # {{cookiecutter.width}}
HEIGHT=720  # {{cookiecutter.height}}

# reference/idealized screen pixels
REFX = 1280
REFY = 720

def u(real, ref, v):
    if abs(v)<0.9999999:
        result = int( (float(real)/100.0) * (v*1000))
        if v<0:
            return real-result
        return result
    return int( (real/ref) * v )

def ux(*argv):
    global WIDTH, REFX
    acc = 0
    for v in argv:
        acc += u(WIDTH, REFX, v)
    return acc

def uy(*argv):
    global HEIGHT, REFY
    acc = 0
    for v in argv:
        acc += u(HEIGHT, REFY, v)
    return acc




# do not rename
async def custom_site():

    import sys
    import asyncio
    import platform
    import json
    from pathlib import Path
    import embed
    import pygame
    import time

    platform.document.body.style.background = "#000000"

    class LoadScreen():
        """
        Render and track a progress bar as well as a splash screen while resources are being loaded.

        All widths, heights, and positions this class uses are normalized to the range [0...1]. When the splash image
        and progress bar are drawn to the screen, the normalized numbers are converted to pygame's screen units.

        Initially only the progress bar is shown, as the splash image is loaded with the apk. When the apk is fully
        loaded the splash image will be presented on the screen, along with the progress bar.
        """
        def __init__(
            self,
            screen: pygame.Surface,
            bar_width: float = 1.0,
            bar_height: float = 0.01,
            bar_y: float = 0.99,
            bar_bg_colour = (10, 10, 10),
            bar_fg_colour = (0, 200, 100),
            seconds = 10,
        ):
            self._screen = screen
            self._splash = None
            self._splash_rect = None
            self._bar_width = bar_width
            self._bar_height = bar_height
            self._bar_y = bar_y
            self._bar_bg_colour = bar_bg_colour
            self._bar_fg_colour = bar_fg_colour
            screen_rect = self._screen.get_rect()
            self._bg_rect = pygame.Rect(
                (1.0 - self._bar_width) / 2.0 *  screen_rect.width,
                self._bar_y * screen_rect.height,
                self._bar_width * screen_rect.width,
                self._bar_height * screen_rect.height
            )
            self._fg_rect = self._bg_rect.copy()
            self._fg_rect.width = 0
            self._total_time = seconds
            self._start_time = 0
            self._elapsed = 0

        async def go(self):
            self._elapsed = 0
            self._start_time = time.time()
            while self._elapsed <= self._total_time:
                self._update(self._elapsed / self._total_time)
                self._elapsed = (time.time() - self._start_time)
                # print(f"**************************** {self._elapsed}")
                await asyncio.sleep(.1)

        def load_splash(self, splash_path: str):
            self._splash = pygame.image.load(splash_path).convert()
            screen_rect = self._screen.get_rect().copy()
            screen_rect.height *= (1.0 - self._bar_height)
            self._splash_rect = self._splash.get_rect().fit(screen_rect)
            self._splash = pygame.transform.smoothscale(self._splash, self._splash_rect.size)

        def finish(self):
            self._elapsed = self._total_time
            self._start_time = time.time() - self._total_time

        def _update(self, progress: float):
            if self._splash:
                self._screen.blit(self._splash, self._splash_rect)
                self._splash = None # Nonify so that it's only blitted once
            screen_rect = self._screen.get_rect()
            radius = round(self._bg_rect.height * 0.3)
            pygame.draw.rect(
                self._screen,
                self._bar_bg_colour,
                self._bg_rect,
                border_radius = radius,
            )
            pygame.draw.rect(
                self._screen,
                self._bar_fg_colour,
                self._bg_rect,
                width = 1,
                border_radius = radius,
            )
            if progress != 0:
                self._fg_rect.width = progress * self._bar_width * self._screen.get_rect().width
                pygame.draw.rect(
                    self._screen,
                    self._bar_fg_colour,
                    self._fg_rect,
                    border_radius = radius,
                )
            pygame.display.update()
            window.chromakey(None, *self._screen.get_colorkey(), 40)


    pygame.init()
    pygame.font.init()

    screen = pygame.display.set_mode((1280, 720), pygame.SRCALPHA, 32)
    screen.set_colorkey((0,0,0,0), pygame.RLEACCEL)

    load_screen = LoadScreen(screen)
    load_screen_task = asyncio.create_task(load_screen.go(), name = "load_screen_task")

    platform.window.transfer.hidden = true
    platform.window.canvas.style.visibility = "visible"

    apk = "{{cookiecutter.archive}}.apk"
    bundle = "{{cookiecutter.archive}}"

    # the C or js loader could do that but be explicit.
    appdir = Path(f"/data/data/{bundle}") # /data/data/{{cookiecutter.archive}}
    appdir.mkdir()

    # mount apk
    cfg = {
        "io": "url",
        "type":"mount",
        "mount" : {
            "point" : appdir.as_posix(),
            "path" : "/",
        },
        "path" : f"/ => {appdir.as_posix()}",
    }
    track = platform.window.MM.prepare(apk, json.dumps(cfg))

    # wait until zip mount + overlayfs is complete
    while not track.ready:
        await asyncio.sleep(.1)

    # The splash image is available now -> load it and show it
    load_screen.load_splash(os.path.join(appdir, "assets", "splash.jpeg"))

    # preloader will change dir and prepend it to sys.path
    platform.run_main(PyConfig, loaderhome= appdir / "assets", loadermain=None)

    # wait preloading complete
    # that includes images and wasm compilation of bundled modules
    while embed.counter()<0:
        await asyncio.sleep(.1)

    main = appdir / "assets" / "main.py"

    # start async top level machinery and add a console.
    await TopLevel_async_handler.start_toplevel(platform.shell, console=window.python.config.debug)

    # now that apk is mounted we have access to font cache
    # but we need to fill __file__ that is not yet set
    __import__(__name__).__file__ = str(main)


    # BEGIN WARNING
    # ui_callback() and the block under if not platform.window.MM.UME will blow up because I deleted definitions
    # of variables they use. I want to see it blow up and fix it when it does. Load localhost:8000/?-i in the browser
    # to see the interpreter's output and debug the issue if loading the game appears frozen.

    # now make a prompt
    def ui_callback(pkg, error=None):
        fnt = pygame.sysfont.SysFont("freesans",  uy(80) )
        if error:
            prompt = fnt.render(f"{error}", True, "black")
        else:
            prompt = fnt.render(f"Setting [{pkg}] up", True, "black")
        pg_bar(track.len)
        screen.blit(prompt, ( marginx+ ux(80), marginy - uy(10) ) )
        compose()

    # test/wait if user media interaction required
    if not platform.window.MM.UME:
        # now make a prompt
        fnt = pygame.sysfont.SysFont("freesans",  uy(80) )
        prompt = fnt.render("Ready to start !", True, "blue")
        pg_bar(track.len)
        screen.blit(prompt, ( marginx+ ux(80), marginy - uy(10) ) )
        compose()
        print("""
        * Waiting for media user engagement : please click/touch page *
    """)
        while not platform.window.MM.UME:
            await asyncio.sleep(.1)
    else:
        print(f" * NOT Waiting for media user engagement : go straight into game *")
    # END WARNING

    await shell.runpy(main, callback=ui_callback)

    load_screen.finish()
    await load_screen_task


import asyncio

asyncio.run( custom_site() )












# BEGIN BLOCK
#
# now this is the html part you can (and should) customize
# It is not mandatory : pygame-script when it reads the first line (also called
# shebang ) of above code create absolute minimal widget set
# required for running with default rules
#
# do not alter that comment block it is separating python code from html code
# =============================================================================
# --></script><head><!--
//=============================================================================
//
//
//
//
//
//
//

    {%- if cookiecutter.comment != "" -%}
{{cookiecutter.comment}}
    {% endif %}

--><script type="application/javascript">
// END BLOCK



// this dict is available under PyConfig.config from __main__

config = {
    xtermjs : "{{cookiecutter.xtermjs}}" ,
    _sdl2 : "canvas",
    user_canvas : 0,
    user_canvas_managed : 0,
    ume_block : {{cookiecutter.ume_block}},
    can_close : {{cookiecutter.can_close}},
    archive : "{{cookiecutter.archive}}",
    gui_debug : 3,
    cdn : "{{cookiecutter.cdn}}",
    autorun : {{cookiecutter.autorun}},
    PYBUILD : "{{cookiecutter.PYBUILD}}"
}

</script>

    <title>{{cookiecutter.title}}</title>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="viewport" content="height=device-height, initial-scale=1.0">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes"/>

    <link rel="prefetch" href="{{cookiecutter.cdn}}cpythonrc.py">
    <link rel="prefetch" href="{{cookiecutter.cdn}}vt/xterm.js">
    <link rel="prefetch" href="{{cookiecutter.cdn}}vt/xterm-addon-image.js">

    <link rel="icon" type="image/png" href="favicon.png" sizes="16x16">

    <style>
        #status {
            display: inline-block;
            vertical-align: center;
            margin-top: 20px;
            margin-left: 30px;
            font-weight: bold;
            color: rgb(120, 120, 120);
        }

        #progress {
            height: 20px;
            width: 300px;
        }

        div.emscripten { text-align: center; }
        div.emscripten_border { border: 0px solid black; }
        div.thick_border { border: 0px solid black; }

        /* the canvas *must not* have any border or padding, or mouse coords will be wrong */
        /* average size of droid screen 470dp x 320dp  */
        canvas.emscripten {
            border: 0px none;
            background-color: transparent;
            width: 100%;
            height: 100%;
            z-index: 5;

            padding: 0;
            margin: 0 auto;

            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
        }

        body {
            font-family: arial;
            margin: 0;
            padding: none;
            background-color:black;
        }

        .topright{
           position:absolute;
           top:0px;
           right:0px;
        }

        .bottomright {
            position:absolute;
            top: 40%;
            right: 0px;
        }

        .center {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .trinfo{
           position:relative;
           right:0px;
           border: 0px solid black;
        }

        .framed{
           position:relative;
           top:150px;
           right:10px;
           border: 0px solid black;
        }
    </style>

    <script src="{{cookiecutter.cdn}}/browserfs.min.js"></script>

</head>

<body>

    <div id="transfer" align=center>
<!--        <div class="spinner" id='spinner'></div> -->
        <div class="emscripten" id="status">Downloading...</div>
        <div class="emscripten">
            <progress value="0" max="100" id="progress"></progress>
        </div>
    </div>


    <canvas class="emscripten" id="canvas"
width="1px"
height="1px"
    oncontextmenu="event.preventDefault()" tabindex=1>
    </canvas>

    <div id=html></div>

    <div id=crt  class=bottomright >

        <div id="system" hidden>
            <div class="button-container">
                <button id="aiostop" disabled>AIO ⏏︎</button>
                <button id="aiopaused_true" disabled>AIO ■</button>
                <button id="aiopaused_false" disabled>AIO ▶</button>
                <button id="pygame_mixer_music_pause" disabled>Music ■</button>
            </div>

            <div class="button-container">
                <div id=load_min>min</div>
                <div id=load_avg>avg</div>
                <div id=load_max>max</div>
              <button id="load_rst" disabled>RESET</button>
            </div>

            <div id="level">(battery level unknown)</div>
            <div id="stateBattery">(charging state unknown)</div>

        </div>

        <div id=box class="emscripten_border" hidden=true>

            <div id="info" class="trinfo"></div>

            <iframe id="iframe" class="framed" name="iframe"
width="1280px" height="90%"
allowtransparency="true"
style="z-index: 10;"
style="background: #FFFFFF;"
frameborder="0"
                allowfullscreen="true"
                webkitallowfullscreen="true"
                msallowfullscreen="true"
                mozallowfullscreen="true"
                sandbox="allow-same-origin allow-top-navigation allow-scripts allow-pointer-lock"
                allow="autoplay; fullscreen *; geolocation; microphone; camera; midi; monetization; xr-spatial-tracking; gamepad; gyroscope; accelerometer; xr; cross-origin-isolated"
                src="{{cookiecutter.cdn}}empty.html"
                scrolling="yes">
            </iframe>
        </div>

    </div>


    <div id="dlg" hidden>
        <input type="file" id="dlg_multifile" multiple accept="image/*">
        <label for="dlg_multifile">Select files</label>
    </div>

    <div id="pyconsole">
        <div id="terminal" tabIndex=1 align="left"></div>
    </div>

    <script type="application/javascript">

    async function custom_onload(debug_hidden) {
        // this is called before anything python is loaded
        // make your js customization here
        console.log(__FILE__, "custom_onload")

        pyconsole.hidden = debug_hidden
        system.hidden = debug_hidden
        transfer.hidden = debug_hidden
        info.hidden = debug_hidden
        box.hidden =  debug_hidden

    }

    function custom_prerun(){
        // no python main and no (MEMFS + VFS) yet.
        console.log(__FILE__, "custom_prerun")

    }

    function custom_postrun(){
        // python main and no VFS filesystem yet.
        console.log(__FILE__, "custom_postrun")

        // prevent ff horizontal scroll
        window.addEventListener("keydown", function(e) {
            if(["Space","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].indexOf(e.code) > -1) {
                if (!python.config.debug)
                    e.preventDefault();
            }
        }, false);

    }

    function debug() {
        // allow to gain access to dev tools from js console
        // but only on desktop. difficult to reach when in iframe
        python.config.debug = true
        custom_onload(false)
        Module.PyRun_SimpleString("shell.uptime()")
        window_resize()
    }

    function info_inline(data){
        document.getElementById("info").innerHTML = data
    }

    function info_online(url) {
        // display info about current APK
        fetch( url /*, options */)
            .then((response) => response.text())
            .then((html) => {
                info_inline(html);
        })
        .catch((error) => {
            console.warn(error);
        });
    }

    function frame_online(url) {
        window.frames["iframe"].location = url;
    }

    </script>

</body>
</html>
